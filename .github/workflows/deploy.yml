name: Deploy

on:
  workflow_run:
    workflows: [ "Test and Lint" ]
    branches: [ master ]
    types:
      - completed
  workflow_dispatch:


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: wallet-backend-test
  DEPLOY_PATH: ~/wallet-backend
  REP_OWNER: tomatoinoil

defaults:
  run:
    working-directory: .

jobs:
  build_and_push:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./infra/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:prod


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment:
      name: prod
    needs: build_and_push
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Copy docker-compose file
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: >-
            ./infra/docker-compose.yaml,
            ./infra/docker-compose.prod.yaml,
            ./infra/nginx/default.prod.conf
            ./infra/alloy/config.alloy
            ./infra/grafana/datasources.yaml
            ./infra/loki/config.yaml
            ./infra/prometheus/prometheus.yaml
          target: ${{ env.DEPLOY_PATH }}

      - name: Create .env file
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            rm -f .env
            touch .env

            echo DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }} >> .env
            echo DJANGO_SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}' >> .env
            echo DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }} >> .env
            echo DOMAIN=${{ secrets.DOMAIN }} >> .env

            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env


  start_application:
    name: Start application
    runs-on: ubuntu-latest
    environment:
      name: prod
    needs: deploy
    steps:
      - name: Start appication
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}

            sudo docker image prune -f

            sudo docker pull ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:prod

            sudo docker compose --file infra/docker-compose.prod.yaml stop

            sudo docker compose --file infra/docker-compose.prod.yaml rm backend -f

            sudo docker compose --env-file .env --file infra/docker-compose.prod.yaml up -d
